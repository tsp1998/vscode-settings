{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// Javascript
	"consoleLog": {
		"prefix": ["clg"],
		"body": "console.log(${1:object})"
	},
	"consoleLogObject": {
		"prefix": "clo",
		"body": "console.log(`${1:object}`, ${1:object})"
	},
	"const destructure": {
		"prefix": "condes",
		"body": ["const { $2 } = $1;"]
	},
	"let destructure": {
		"prefix": "letdes",
		"body": ["let { $2 } = $1;"]
	},
	"jsGetById":{
		"prefix": "dgi",
		"body": "document.getElementById('$1')"
	},
	"promise": {
		"prefix": ["promise", "newPromise"],
		"body": [
			"new Promise((resolve, reject) => {",
			"\t$1",
			"})"
		]
	},
	// Javascript

	//react, styled components, babel, redux
	"style-component": {
		"prefix": "safce",
		"body": [
			"import React from 'react'\n",
			"//styles",
			"import styled from 'styled-components'",
			"const $1Styled = styled.div`",
			"\t",
			"`\n",
			"const $1 = () => {",
			"\treturn (",
			"\t\t<$1Styled>",
			"\t\t\t$2",
			"\t\t</$1Styled>",
			"\t)",
			"}\n",
			"export default $1"
		]
	},
	"styledCompImport" : {
		"body": ["import styled from 'styled-components'"],
		"prefix": "imsc"
	},
	"styledCompNamedImport" : {
		"body": ["import { $1 } from 'styled-components'"],
		"prefix": "imsd"
	},
	"styledCompWithNamedImport" : {
		"body": ["import styled, { $1 } from 'styled-components'"],
		"prefix": "imscd"
	},
	"styledComp" : {
		"body": [
			"const $1 = styled$2`",
			"\t$3",
			"`"
		],
		"prefix": "sc"
	},
	"styledCompProp" : {
		"body": "${({$1}) => $2}",
		"prefix": "scp"
	},
	"jsFunction" : {
		"prefix": "fun",
		"body": [
			"function $1(params) {",
			"\t$2",
			"}"
		]
	},
	"import": {
		"prefix": "im",
		"body": "import '${1:module}'"
	},
	"import module": {
		"prefix": "imp",
		"body": "import ${2:moduleName} from '${1:module}'"
	},
	"import named modules": {
		"prefix": "imd",
		"body": "import { $2 } from '${1:module}'"
	},
	"export": {
		"prefix": "ex",
		"body": "export "
	},
	"export default module": {
		"prefix": "exp",
		"body": "export default "
	},
	"export const": {
		"prefix": "expc",
		"body": "export const "
	},
	"import react":{
		"prefix": "imr",
		"body": "import React from 'react'"
	},
	//react

	//node
	"moduleExport" : {
		"body": [
			"module.exports = $1"
		],
		"prefix": "mexp"
	},
	"controllerMethod": {
		"prefix": "contMethod",
		"body": [
			"exports.$1 = async (req, res, next) => {",
			"\ttry {",
			"\t\tconst query = {};",
			"\t\t$2",
			"\t\tif (!$3) throw new Error($4);",
			"\t\telse {",
			"\t\t\treturn res.json({ status: 'success', $5});",
			"\t\t}",
			"\t} catch (error) {",
			"\t\treturn next(error);",
			"\t}",
			"};"
		]
	},
	"require" : {
		"body": [
			"require('$1')"
		],
		"prefix": "rq"
	},
	"require-default" : {
		"body": [
			"const ${2:name} = require('$1')"
		],
		"prefix": "rqp"
	},
	"require-named" : {
		"body": [
			"const { $2 } = require('$1')"
		],
		"prefix": "rqd"
	},
	"routerSnippet": {
		"prefix": "routerSnippet",
		"body": [
			"const express = require('express');",
			"const router = express.Router();\n",
			"\t$1\n",
			"module.exports = router;"
		]
	},
	"reqres": {
		"prefix": "reqres",
		"body": [
			"(req, res) => {",
			"\t$1",
			"}"
		]
	},
	"reqresnext": {
		"prefix": "reqresnext",
		"body": [
			"(req, res, next) => {",
			"\t$1",
			"}"
		]
	},
	"expressapp": {
		"prefix": "expressapp",
		"body": [
			"const express = require('express')",
			"const app = express();",
			"const PORT = process.env.PORT || ${1:8080};\n",
			"app.get('/', (req, res) => {",
			"  res.send('${2:Welcome to Express App}');",
			"})\n",
			"app.listen(PORT, err => {",
			"  if (err) return console.log(`Error: `, err);",
			"  console.log(`App is listening on PORT \\${PORT}`);",
			"})"
		]
	},
	//node
	
	//testing JS
	"describe": {
		"prefix": "desc",
		"body": [
			"describe('$1', () => {",
				"\t$2",
			"})"
		]
	},
	"test": {
		"prefix": ["test", "tc"],
		"body": [
			"test('should $1', () => {",
				"\t$2",
			"})"
		]
	},
	"it function": {
		"prefix": "tit",
		"body": [
			"it('should $1', () => {",
				"\t$2",
			"})"
		]
	},
	//testing JS
	
	//css
	"mediaPhone":{
		"prefix": "mp",
		"body": [
			"@media only screen and (max-width: 37.5em) {",
			"\t/* phone //600px */",
			"\t$1",
			"}"
		]
	},
	"mediaTab":{
		"prefix": "mt",
		"body": [
			"@media only screen and (max-width: 56.25em) {",
			"\t/* phone //900px */",
			"\t$1",
			"}"
		]
	},
	"mediaTabLand":{
		"prefix": "mtl",
		"body": [
			"@media only screen and (max-width: 75em) {",
			"\t/* phone //1200px */",
			"\t$1",
			"}"
		]
	},
	"mediaDesktop":{
		"prefix": "md",
		"body": [
			"@media only screen and (min-width: 112.5em) {",
			"\t/* phone //1800 */",
			"\t$1",
			"}"
		]
	},
	//css
}